<?php

namespace DoctrineORMModule\Proxy\__CG__\Kicker\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Game extends \Kicker\Entity\Game implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'team1_result', 'team2_result', 'created', '' . "\0" . 'Kicker\\Entity\\Game' . "\0" . 'gamelinks');
        }

        return array('__isInitialized__', 'id', 'team1_result', 'team2_result', 'created', '' . "\0" . 'Kicker\\Entity\\Game' . "\0" . 'gamelinks');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Game $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getTeam1_result()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTeam1_result', array());

        return parent::getTeam1_result();
    }

    /**
     * {@inheritDoc}
     */
    public function getTeam2_result()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTeam2_result', array());

        return parent::getTeam2_result();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', array());

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function setTeam1_result($team1_result)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTeam1_result', array($team1_result));

        return parent::setTeam1_result($team1_result);
    }

    /**
     * {@inheritDoc}
     */
    public function setTeam2_result($team2_result)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTeam2_result', array($team2_result));

        return parent::setTeam2_result($team2_result);
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated($created)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', array($created));

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function setGamelinks($gamelinks)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGamelinks', array($gamelinks));

        return parent::setGamelinks($gamelinks);
    }

    /**
     * {@inheritDoc}
     */
    public function getGameLinks()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGameLinks', array());

        return parent::getGameLinks();
    }

    /**
     * {@inheritDoc}
     */
    public function addGameLink(\Kicker\Entity\GameLink $gLink)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addGameLink', array($gLink));

        return parent::addGameLink($gLink);
    }

    /**
     * {@inheritDoc}
     */
    public function removeGameLink(\Kicker\Entity\GameLink $gLink)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeGameLink', array($gLink));

        return parent::removeGameLink($gLink);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsers', array());

        return parent::getUsers();
    }

    /**
     * {@inheritDoc}
     */
    public function getUsersAsArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsersAsArray', array());

        return parent::getUsersAsArray();
    }

    /**
     * {@inheritDoc}
     */
    public function toArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', array());

        return parent::toArray();
    }

}
